#!/usr/bin/env bash
set -euo pipefail

#################################################
#                                               #
#     Install Squid caching proxy server        #
#     Multi-OS support with configuration       #
#                                               #
#################################################

# Source common library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/../lib/common.sh"

# Setup
trap cleanup_on_exit EXIT
require_root

# Configuration
SQUID_PORT="${SQUID_PORT:-3128}"
SQUID_MODE="${SQUID_MODE:-forward}"  # forward, transparent, or reverse
ALLOWED_NETWORK="${ALLOWED_NETWORK:-}"  # e.g., 192.168.1.0/24
ENABLE_CACHE="${ENABLE_CACHE:-yes}"
CACHE_SIZE="${CACHE_SIZE:-1024}"  # MB

print_header "Squid Proxy Server Installer"

# Detect OS
OS=$(detect_os)
PKG_MGR=$(get_package_manager)

print_info "Detected OS: $OS"
print_info "Package manager: $PKG_MGR"
print_info "Squid port: $SQUID_PORT"
print_info "Proxy mode: $SQUID_MODE"
print_info "Enable cache: $ENABLE_CACHE"
[ "$ENABLE_CACHE" = "yes" ] && print_info "Cache size: ${CACHE_SIZE}MB"
echo

# Install Squid
install_squid() {
    print_header "Installing Squid"

    case "$OS" in
        rhel)
            case "$PKG_MGR" in
                dnf)
                    # EPEL not always needed on RHEL 9+, but include for safety
                    dnf install -y epel-release 2>/dev/null || true
                    dnf install -y squid
                    ;;
                yum)
                    yum install -y epel-release
                    yum install -y squid
                    ;;
            esac
            ;;
        debian)
            apt-get update
            apt-get install -y squid
            ;;
        *)
            error_exit "Unsupported OS: $OS"
            ;;
    esac

    print_success "Squid installed"
}

# Backup original configuration
backup_configuration() {
    print_header "Backing up Squid configuration"

    local config_file="/etc/squid/squid.conf"

    if [ -f "$config_file" ]; then
        cp "$config_file" "${config_file}.bak-$(date +%Y%m%d-%H%M%S)"
        print_success "Configuration backed up"
    fi
}

# Configure Squid
configure_squid() {
    print_header "Configuring Squid"

    local config_file="/etc/squid/squid.conf"

    # Create configuration based on mode
    case "$SQUID_MODE" in
        forward)
            configure_forward_proxy
            ;;
        transparent)
            configure_transparent_proxy
            ;;
        reverse)
            configure_reverse_proxy
            ;;
        *)
            error_exit "Invalid proxy mode: $SQUID_MODE (must be: forward, transparent, or reverse)"
            ;;
    esac

    # Create blocked sites file
    touch /etc/squid/blocked_sites
    print_info "Created /etc/squid/blocked_sites for site blocking"

    print_success "Squid configured"
}

# Configure forward proxy
configure_forward_proxy() {
    print_info "Configuring forward proxy..."

    local config_file="/etc/squid/squid.conf"

    cat > "$config_file" <<EOF
# Squid Forward Proxy Configuration
# Generated by install_squid.sh

# Network options
http_port $SQUID_PORT

# Access control
acl SSL_ports port 443
acl Safe_ports port 80          # http
acl Safe_ports port 21          # ftp
acl Safe_ports port 443         # https
acl Safe_ports port 70          # gopher
acl Safe_ports port 210         # wais
acl Safe_ports port 1025-65535  # unregistered ports
acl Safe_ports port 280         # http-mgmt
acl Safe_ports port 488         # gss-http
acl Safe_ports port 591         # filemaker
acl Safe_ports port 777         # multiling http

acl CONNECT method CONNECT

# Blocked sites
acl blocked_sites dstdomain "/etc/squid/blocked_sites"
http_access deny blocked_sites

# Deny requests to certain unsafe ports
http_access deny !Safe_ports

# Deny CONNECT to other than secure SSL ports
http_access deny CONNECT !SSL_ports

# Only allow cachemgr access from localhost
http_access allow localhost manager
http_access deny manager

EOF

    # Add network ACL if specified
    if [ -n "$ALLOWED_NETWORK" ]; then
        cat >> "$config_file" <<EOF
# Allow access from specific network
acl localnet src $ALLOWED_NETWORK
http_access allow localnet

EOF
        print_info "Allowed network: $ALLOWED_NETWORK"
    else
        cat >> "$config_file" <<EOF
# Allow access from local network (adjust as needed)
acl localnet src 10.0.0.0/8     # RFC1918 possible internal network
acl localnet src 172.16.0.0/12  # RFC1918 possible internal network
acl localnet src 192.168.0.0/16 # RFC1918 possible internal network
http_access allow localnet

EOF
        print_warning "No specific network configured. Allowing RFC1918 private networks."
        print_warning "Edit /etc/squid/squid.conf to restrict access to your network."
    fi

    cat >> "$config_file" <<EOF
# Allow localhost
http_access allow localhost

# Deny all other access
http_access deny all

EOF

    # Add caching configuration
    if [ "$ENABLE_CACHE" = "yes" ]; then
        cat >> "$config_file" <<EOF
# Caching configuration
cache_dir ufs /var/spool/squid $CACHE_SIZE 16 256
cache_mem 256 MB
maximum_object_size 4096 KB
minimum_object_size 0 KB

EOF
    else
        cat >> "$config_file" <<EOF
# Caching disabled
cache deny all

EOF
    fi

    cat >> "$config_file" <<EOF
# Leave coredumps in the first cache dir
coredump_dir /var/spool/squid

# Add any of your own refresh_pattern entries above these.
refresh_pattern ^ftp:           1440    20%     10080
refresh_pattern ^gopher:        1440    0%      1440
refresh_pattern -i (/cgi-bin/|\?) 0     0%      0
refresh_pattern .               0       20%     4320

# Logging
access_log daemon:/var/log/squid/access.log squid
cache_log /var/log/squid/cache.log

# Hostname
visible_hostname $(hostname)
EOF
}

# Configure transparent proxy
configure_transparent_proxy() {
    print_info "Configuring transparent proxy..."

    local config_file="/etc/squid/squid.conf"

    cat > "$config_file" <<EOF
# Squid Transparent Proxy Configuration
# Generated by install_squid.sh

# Network options (transparent mode)
http_port $SQUID_PORT transparent

# Access control
acl SSL_ports port 443
acl Safe_ports port 80
acl Safe_ports port 443
acl Safe_ports port 1025-65535

acl CONNECT method CONNECT

# Blocked sites
acl blocked_sites dstdomain "/etc/squid/blocked_sites"
http_access deny blocked_sites

http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports

http_access allow localhost manager
http_access deny manager

# Allow all (transparent mode)
http_access allow all

EOF

    # Add caching configuration
    if [ "$ENABLE_CACHE" = "yes" ]; then
        cat >> "$config_file" <<EOF
# Caching configuration
cache_dir ufs /var/spool/squid $CACHE_SIZE 16 256
cache_mem 256 MB

EOF
    else
        cat >> "$config_file" <<EOF
# Caching disabled
cache deny all

EOF
    fi

    cat >> "$config_file" <<EOF
coredump_dir /var/spool/squid

refresh_pattern ^ftp:           1440    20%     10080
refresh_pattern ^gopher:        1440    0%      1440
refresh_pattern -i (/cgi-bin/|\?) 0     0%      0
refresh_pattern .               0       20%     4320

access_log daemon:/var/log/squid/access.log squid
cache_log /var/log/squid/cache.log

visible_hostname $(hostname)
EOF

    print_warning "Transparent proxy requires iptables rules to redirect traffic to port $SQUID_PORT"
}

# Configure reverse proxy
configure_reverse_proxy() {
    print_info "Configuring reverse proxy (basic)..."

    local config_file="/etc/squid/squid.conf"
    local backend_host="${BACKEND_HOST:-127.0.0.1}"
    local backend_port="${BACKEND_PORT:-80}"

    cat > "$config_file" <<EOF
# Squid Reverse Proxy Configuration
# Generated by install_squid.sh

# Network options (reverse proxy mode)
http_port $SQUID_PORT accel defaultsite=${backend_host}

# Access control
acl SSL_ports port 443
acl CONNECT method CONNECT

http_access allow all

# Backend configuration
cache_peer $backend_host parent $backend_port 0 no-query originserver

# Don't cache
cache deny all

# Logging
access_log daemon:/var/log/squid/access.log squid
cache_log /var/log/squid/cache.log

visible_hostname $(hostname)
EOF

    print_info "Backend: ${backend_host}:${backend_port}"
    print_warning "Reverse proxy configuration is basic. Customize for your environment."
}

# Initialize cache directories
initialize_cache() {
    if [ "$ENABLE_CACHE" != "yes" ]; then
        return 0
    fi

    print_header "Initializing cache directories"

    # Create cache directories
    squid -z

    print_success "Cache directories initialized"
}

# Configure firewall
configure_firewall() {
    print_header "Configuring firewall"

    if command_exists firewall-cmd; then
        # firewalld (RHEL-based)
        if [ "$SQUID_PORT" = "3128" ]; then
            firewall-cmd --permanent --add-service=squid
        else
            firewall-cmd --permanent --add-port=${SQUID_PORT}/tcp
        fi
        firewall-cmd --reload
        print_success "Firewall configured (firewalld)"
    elif command_exists ufw; then
        # ufw (Debian-based)
        ufw allow ${SQUID_PORT}/tcp
        print_success "Firewall configured (ufw)"
    else
        print_warning "No supported firewall found"
        print_info "Manually open port ${SQUID_PORT}/tcp if using a firewall"
    fi
}

# Start Squid service
start_squid() {
    print_header "Starting Squid service"

    # Test configuration
    print_info "Testing Squid configuration..."
    if squid -k parse; then
        print_success "Configuration test passed"
    else
        error_exit "Configuration test failed"
    fi

    # Enable and start service
    systemctl enable squid
    systemctl start squid

    # Verify service is running
    sleep 2
    if systemctl is-active --quiet squid; then
        print_success "Squid service started successfully"
    else
        error_exit "Squid service failed to start"
    fi
}

# Display summary
display_summary() {
    print_header "Installation Complete"

    local ip_addr=$(hostname -I | awk '{print $1}')

    print_success "Squid proxy server installed successfully!"
    echo

    print_info "Configuration:"
    print_info "  Proxy mode: $SQUID_MODE"
    print_info "  Proxy port: $SQUID_PORT"
    print_info "  Proxy address: ${ip_addr}:${SQUID_PORT}"
    [ -n "$ALLOWED_NETWORK" ] && print_info "  Allowed network: $ALLOWED_NETWORK"
    [ "$ENABLE_CACHE" = "yes" ] && print_info "  Cache size: ${CACHE_SIZE}MB"
    echo

    print_info "Configuration Files:"
    print_info "  Main config: /etc/squid/squid.conf"
    print_info "  Blocked sites: /etc/squid/blocked_sites"
    print_info "  Access log: /var/log/squid/access.log"
    print_info "  Cache log: /var/log/squid/cache.log"
    echo

    print_info "Service Management:"
    print_info "  systemctl status squid    # Check service status"
    print_info "  systemctl restart squid   # Restart service"
    print_info "  systemctl stop squid      # Stop service"
    echo

    print_info "Configuration Test:"
    print_info "  squid -k parse            # Test configuration"
    print_info "  squid -k reconfigure      # Reload configuration"
    echo

    print_info "View Logs:"
    print_info "  tail -f /var/log/squid/access.log"
    print_info "  tail -f /var/log/squid/cache.log"
    echo

    print_info "Block Websites:"
    print_info "  echo '.example.com' >> /etc/squid/blocked_sites"
    print_info "  systemctl reload squid"
    echo

    case "$SQUID_MODE" in
        forward)
            print_info "Client Configuration (Forward Proxy):"
            print_info "  HTTP Proxy: ${ip_addr}:${SQUID_PORT}"
            print_info "  Set this in browser or system proxy settings"
            ;;
        transparent)
            print_info "Transparent Proxy Setup:"
            print_info "  Configure iptables to redirect port 80 to ${SQUID_PORT}:"
            print_info "  iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port ${SQUID_PORT}"
            ;;
        reverse)
            print_info "Reverse Proxy:"
            print_info "  Squid forwards requests to backend server"
            print_info "  Clients connect to: ${ip_addr}:${SQUID_PORT}"
            ;;
    esac

    log_success "Squid installation completed"
}

# Main installation flow
main() {
    install_squid
    backup_configuration
    configure_squid
    initialize_cache
    configure_firewall
    start_squid
    display_summary
}

# Run main
main
